/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient.MessageTypes.Std;

namespace RosSharp.RosBridgeClient.MessageTypes.Pr2GripperSensor
{
    public class PR2GripperEventDetectorData : Message
    {
        public const string RosMessageName = "pr2_gripper_sensor_msgs/PR2GripperEventDetectorData";

        //  Time the data was recorded at
        public Time stamp { get; set; }
        //  true if the trigger conditions have been met 
        //  (see PR2GripperEventDetectorCommand)
        public bool trigger_conditions_met { get; set; }
        //  true if the pressure sensors detected a slip event
        //  slip events occur when the finger pressure sensors
        //  high-freq. content exceeds the slip_trigger_magnitude variable
        //  (see PR2GripperEventDetectorCommand)
        public bool slip_event { get; set; }
        //  true if the hand-mounted accelerometer detected a contact acceleration
        //  acceleration events occur when the palm accelerometer
        //  high-freq. content exceeds the acc_trigger_magnitude variable
        //  (see PR2GripperEventDetectorCommand)
        public bool acceleration_event { get; set; }
        //  the high-freq acceleration vector that was last seen (x,y,z)
        public double[] acceleration_vector { get; set; }

        public PR2GripperEventDetectorData()
        {
            this.stamp = new Time();
            this.trigger_conditions_met = false;
            this.slip_event = false;
            this.acceleration_event = false;
            this.acceleration_vector = new double[3];
        }

        public PR2GripperEventDetectorData(Time stamp, bool trigger_conditions_met, bool slip_event, bool acceleration_event, double[] acceleration_vector)
        {
            this.stamp = stamp;
            this.trigger_conditions_met = trigger_conditions_met;
            this.slip_event = slip_event;
            this.acceleration_event = acceleration_event;
            this.acceleration_vector = acceleration_vector;
        }
    }
}
