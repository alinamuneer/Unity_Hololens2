/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient.MessageTypes.Std;

namespace RosSharp.RosBridgeClient.MessageTypes.Pr2GripperSensor
{
    public class PR2GripperFindContactData : Message
    {
        // public const string RosMessageName = "pr2_gripper_sensor_msgs/PR2GripperFindContactData";
        public override string RosMessageName => "pr2_gripper_sensor_msgs/PR2GripperFindContactData";

        //  Time the data was recorded at
        public Time stamp { get; set; }
        //  true when our contact conditions have been met
        //  (see PR2GripperFindContact command)
        public bool contact_conditions_met { get; set; }
        //  the finger contact conditions 
        //  true if the finger experienced a contact event
        // 
        //  contact events are defined as contact with the fingerpads
        //  as either steady-state or high-freq force events
        public bool left_fingertip_pad_contact { get; set; }
        public bool right_fingertip_pad_contact { get; set; }
        //  the force experinced by the finger Pads  (N)
        //  NOTE:this ignores data from the edges of the finger pressure
        public double left_fingertip_pad_force { get; set; }
        public double right_fingertip_pad_force { get; set; }
        //  the current joint position (m)
        public double joint_position { get; set; }
        //  the virtual (parallel) joint effort (N)
        public double joint_effort { get; set; }
        //  the control state of our realtime controller
        public PR2GripperSensorRTState rtstate { get; set; }

        public PR2GripperFindContactData()
        {
            this.stamp = new Time();
            this.contact_conditions_met = false;
            this.left_fingertip_pad_contact = false;
            this.right_fingertip_pad_contact = false;
            this.left_fingertip_pad_force = 0.0;
            this.right_fingertip_pad_force = 0.0;
            this.joint_position = 0.0;
            this.joint_effort = 0.0;
            this.rtstate = new PR2GripperSensorRTState();
        }

        public PR2GripperFindContactData(Time stamp, bool contact_conditions_met, bool left_fingertip_pad_contact, bool right_fingertip_pad_contact, double left_fingertip_pad_force, double right_fingertip_pad_force, double joint_position, double joint_effort, PR2GripperSensorRTState rtstate)
        {
            this.stamp = stamp;
            this.contact_conditions_met = contact_conditions_met;
            this.left_fingertip_pad_contact = left_fingertip_pad_contact;
            this.right_fingertip_pad_contact = right_fingertip_pad_contact;
            this.left_fingertip_pad_force = left_fingertip_pad_force;
            this.right_fingertip_pad_force = right_fingertip_pad_force;
            this.joint_position = joint_position;
            this.joint_effort = joint_effort;
            this.rtstate = rtstate;
        }
    }
}
